  position: absolute; /* Position the background text */
  bottom: 0; /* At the bottom. Use top:0 to append it to the top */
  background: rgb(0, 0, 0); /* Fallback color */
  background: rgba(0, 0, 0, 0.5); /* Black background with 0.5 opacity */
  color: #f1f1f1; /* Grey text */
  width: 100%; /* Full width */
  padding: 20px; /* Some padding */

  .grid-img-with-hover {
        width: 100%;
        height: 100%;
        object-fit: cover;
        display: block;
        border-style: solid;
        border-width: 1px;
        border-color: #B8B8B8;
        opacity: 1;
        transition: .5s ease;
        backface-visibility: hidden;
      }
      .fourth-item:hover .grid-img-with-hover {
        opacity: 0.3;
      }
      
      .fourth-item:hover .overlay {
        opacity: 1;
      }







            /*<div className='lightbox'>/*{isOpen &&
       <Lightbox
          mainSrc={this.props.vehicles[vehicleIndex].imgs[photoIndex]}
          nextSrc={this.props.vehicles[vehicleIndex].imgs[(photoIndex + 1) % this.props.vehicles[vehicleIndex].imgs.length]}
          prevSrc={this.props.vehicles[vehicleIndex].imgs[(photoIndex + this.props.vehicles[vehicleIndex].imgs.length - 1) % this.props.vehicles[vehicleIndex].imgs.length]}

          onCloseRequest={() => this.setState({ isOpen: false })}
          onMovePrevRequest={() => this.setState({
            photoIndex: (photoIndex + this.props.vehicles[vehicleIndex].imgs.length - 1) % this.props.vehicles[vehicleIndex].imgs.length,
          })}
          onMoveNextRequest={() => this.setState({
            photoIndex: (photoIndex + 1) % this.props.vehicles[vehicleIndex].imgs.length,
          })}
          wrapperClassName='lightbox'
        />
      }</div>*/


      /*onSubmit={handleSubmit/*() => console.log("oops")this.setState({searchTerm: 'price'})*/}>*/

          .vehicles-wrapper {
      display: flex;
      flex-direction: column;
      padding: 20px;
      align-content: center;
      align-items: center;
    }

        form.search::after {
      content: "";
      clear: both;
      display: table;
    }

            {this.filterVehicles(vehicles, query).map((vehicle, index) => (
          this.renderVehicle(vehicle.id, vehicle, index)
      ))}     